generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  Male
  Female
}

model UserType {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  status      Boolean @default(true)

  users UserOnUserType[]
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  birthDate DateTime
  sex       Sex
  phone     String   @db.VarChar(10)
  email     String   @unique
  password  String

  teams       UsersOnTeams[]
  evaluations UserOnEvaluation[]
  userTypes   UserOnUserType[]
  logistics   UserOnLogistic[]
}

model UserOnUserType {
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userType   UserType @relation(fields: [userTypeId], references: [id])
  userTypeId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@id([userId, userTypeId])
}

model Team {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  img          String
  video        String
  status       Boolean  @default(true)
  registerDate DateTime @default(now())

  users                    UsersOnTeams[]
  competitionRegistrations CompetitionRegistration[]
}

model UsersOnTeams {
  status       Boolean  @default(true)
  registerDate DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId Int

  @@id([userId, teamId])
}

model Banner {
  id  Int    @id @default(autoincrement())
  url String

  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String
}

model Competition {
  id               String   @id @default(uuid())
  name             String   @unique
  description      String
  place            String
  startDate        DateTime
  registerDeadline DateTime
  deadlineUpdate   DateTime
  status           Boolean  @default(true)

  banners    Banner[]
  categories Category[]
  logistics  Logistic[]
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  status      Boolean @default(true)

  competition              Competition               @relation(fields: [competitionId], references: [id])
  competitionId            String
  rules                    Rule[]
  competitionRegistrations CompetitionRegistration[]
  evaluations              Evaluation[]
}

model Rule {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  status      Boolean @default(true)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Robot {
  id                String   @id @default(uuid())
  name              String   @unique
  description       String
  img               String
  connectionDiagram String
  robotProgramming  String
  status            Boolean  @default(true)
  registerDate      DateTime @default(now())

  competitionRegistrations CompetitionRegistration[]
}

enum StatusCompetitionRegister {
  REGISTERED
  INSCRIBED
  REJECTED
}

model CompetitionRegistration {
  id           String                    @id @default(uuid())
  status       StatusCompetitionRegister @default(REGISTERED)
  registerDate DateTime                  @default(now())
  img          String
  total        Int

  category           Category             @relation(fields: [categoryId], references: [id])
  categoryId         Int
  team               Team                 @relation(fields: [teamId], references: [id])
  teamId             Int
  robot              Robot?               @relation(fields: [robotId], references: [id])
  robotId            String?
  notes              CompetitionNote[]
  participationOrder ParticipationOrder?
}

model ParticipationOrder {
  id        Int     @id @default(autoincrement())
  isRunning Boolean @default(false)
  place     Int
  try       Int

  competitionRegistration   CompetitionRegistration @relation(fields: [competitionRegistrationId], references: [id])
  competitionRegistrationId String @unique
}

model UserOnEvaluation {
  date   DateTime @default(now())
  status Boolean  @default(true)

  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([evaluationId, userId])
}

model Evaluation {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  status      Boolean @default(true)
  percent     Int

  category             Category              @relation(fields: [categoryId], references: [id])
  categoryId           Int
  evaluationCriterions EvaluationCriterion[]
  juries               UserOnEvaluation[]
}

model EvaluationCriterion {
  id      Int     @id @default(autoincrement())
  name    String
  percent Int
  status  Boolean @default(true)

  evaluation       Evaluation        @relation(fields: [evaluationId], references: [id])
  evaluationId     String
  teamInscriptions CompetitionNote[]
}

model CompetitionNote {
  note      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  evaluationCriterion   EvaluationCriterion @relation(fields: [evaluationCriterionId], references: [id])
  evaluationCriterionId Int

  competitionRegistration   CompetitionRegistration @relation(fields: [competitionRegistrationId], references: [id])
  competitionRegistrationId String

  @@id([evaluationCriterionId, competitionRegistrationId])
}

model Logistic {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  status      Boolean @default(true)

  competition   Competition      @relation(fields: [competitionId], references: [id])
  competitionId String
  tasks         LogisticTask[]
  users         UserOnLogistic[]
}

model LogisticTask {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  status      Boolean @default(true)

  logistic   Logistic @relation(fields: [logisticId], references: [id])
  logisticId Int
}

model UserOnLogistic {
  date   DateTime @default(now())
  status Boolean  @default(true)

  user       User     @relation(fields: [userId], references: [id])
  userId     String
  logistic   Logistic @relation(fields: [logisticId], references: [id])
  logisticId Int

  @@id([userId, logisticId])
}
